from sqlalchemy import (MetaData,
                        Table,
                        Column,
                        Integer,
                        String,
                        DateTime,
                        Boolean,
                        ForeignKey,
                        Numeric,
                        UniqueConstraint,
                        Date,
                        CheckConstraint,
                        ForeignKeyConstraint)

from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.event import listens_for
import sqlalchemy

__all__ = ("metadata",
           "create_engine",
           "users",
           "users_groups",
           "groups",
           "configurations",
           "editlogs",
           "requestlogs")


conv = {"ix": "ix_%(column_0_label)s",
        "uq": "uq_%(table_name)s_%(column_0_name)s",
        "ck": "ck_%(table_name)s_%(constraint_name)s",
        "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
        "pk": "pk_%(table_name)s"
        }
metadata = MetaData(naming_convention=conv)



def create_engine(db_url, *args, **kwargs):
    """ Simple wrapper around sqlalchemy.create_engine with a few database
        specifc settings.
    """
    if db_url.startswith("postgresql"):
        kwargs["isolation_level"] = "SERIALIZABLE"
    engine = sqlalchemy.create_engine(db_url, *args, **kwargs)

    if db_url.startswith("sqlite://"):
        @listens_for(engine, "connect")
        def do_connect(dbapi_connection, connection_record):
            # disable pysqlite's emitting of the BEGIN statement entirely.
            # also stops it from emitting COMMIT before any DDL.
            dbapi_connection.isolation_level = None

        @listens_for(engine, "begin")
        def do_begin(conn):
            # emit our own BEGIN
            conn.execute("BEGIN")

    # Requires postgres version >= 10
    if db_url.startswith("postgresql"):
        @compiles(sqlalchemy.schema.CreateColumn, 'postgresql')
        def use_identity(element, compiler, **kw):
            text = compiler.visit_create_column(element, **kw)
            text = text.replace("SERIAL",
                                "INT GENERATED BY DEFAULT AS IDENTITY")
            return text
        
    #@listens_for(engine, 'before_cursor_execute')
    #def receive_before_cursor_execute(conn,
                                      #cursor,
                                      #statement,
                                      #parameters,
                                      #context,
                                      #executemany):
        #if not statement.startswith("SELECT"):
            #print(statement, repr(parameters))
    
    return engine



users = Table("users", metadata,
    Column("id", Integer, primary_key=True),
    Column("email", String, unique=True, nullable=False, info={"log": True}),
    Column("name", String, nullable=False),
    Column("forename", String, nullable=False, info={"log": True}),
    Column("surname", String, nullable=False, info={"log": True}),
    Column("last_session", JSONB, default={}, nullable=False),
    Column("restricted", Boolean(name="Bool"), nullable=True),
    
    Column("login_token", String, nullable=True),
    Column("totp_secret", String, nullable=True),
    Column("password", String, nullable=True),
    Column("reset_datetime", String, nullable=True),
    Column("deleted", Boolean(name="bool"), default=False, nullable=False))



groups = Table("groups", metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String, unique=True, nullable=False),
    Column("order", Integer, default=99, nullable=False))



users_groups = Table("users_groups", metadata,
    Column("user_id", Integer, ForeignKey("users.id"), nullable=False),
    Column("group_id", Integer, ForeignKey("groups.id"), nullable=False),
    UniqueConstraint("user_id", "group_id"))



sites = Table("sites", metadata,
    Column("id", Integer, primary_key=True, nullable=False),
    Column("name", String, unique=True, nullable=False, info={"log": True}),
    Column("deleted", Boolean(name="bool"), default=False, index=True, nullable=False))



users_sites = Table("users_sites", metadata,
    Column("user_id", Integer, ForeignKey("users.id"), nullable=False),
    Column("site_id", Integer, ForeignKey("sites.id"), nullable=False),
    UniqueConstraint("user_id", "site_id"))



projects = Table("projects", metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String, unique=True, nullable=False),
    Column("deleted", Boolean(name="bool"), default=False, index=True, nullable=False))



users_projects = Table("users_projects", metadata,
    Column("user_id", Integer, ForeignKey("users.id"), nullable=False),
    Column("project_id", Integer, ForeignKey("projects.id"), nullable=False),
    UniqueConstraint("user_id", "project_id"))



configurations = Table("configurations", metadata,
    Column("id", Integer, primary_key=True, nullable=False),
    Column("name", String, unique=True, nullable=False),
    Column("value", String, default="", nullable=False))



editlogs = Table("editlogs", metadata,
    Column("id", Integer, primary_key=True, nullable=False),
    Column("tablename", String, nullable=False, index=True),
    Column("row_id", Integer, nullable=False, index=True),
    Column("action", String, nullable=False),
    Column("details", String, nullable=False),
    Column("user_id", Integer, ForeignKey("users.id"), nullable=True),
    Column("datetime", DateTime(timezone=True), nullable=False))



requestlogs = Table("requestlogs", metadata,
    Column("id", Integer, primary_key=True, nullable=False),
    Column("ip_address", String, nullable=False, index=True),
    Column("path", String, nullable=False, index=True),
    Column("method", String, nullable=False),
    Column("response", String, nullable=False),
    Column("user_id", Integer, ForeignKey("users.id"), nullable=True),
    Column("datetime", DateTime(timezone=True), nullable=False))



accesslogs = Table("accesslogs", metadata,
    Column("id", Integer, primary_key=True, nullable=False),
    Column("ip_address", String, nullable=False, index=True),
    Column("path", String, nullable=False, index=True),
    Column("method", String, nullable=False),
    Column("response", String, nullable=False),
    Column("user_id", Integer, ForeignKey("users.id"), nullable=True),
    Column("datetime", DateTime(timezone=True), nullable=False))


